[{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mikkel Hovden Christensen. Author, maintainer. Simon Opstrup Drue. Author.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Christensen MH, Drue (2024). dreams: Deep Read-level Error Model Sequencing data. R package version 0.0.0.9000, https://github.com/JakobSkouPedersenLab/dreams.","code":"@Manual{,   title = {dreams: Deep Read-level Error Model for Sequencing data},   author = {Mikkel Hovden Christensen and Simon Opstrup Drue},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://github.com/JakobSkouPedersenLab/dreams}, }"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"dreams","dir":"","previous_headings":"","what":"Deep Read-level Error Model for Sequencing data","title":"Deep Read-level Error Model for Sequencing data","text":"DREAMS analysis pipeline applies neural network low-frequency variant calling circulating tumor DNA detection next-generation DNA sequencing data.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Deep Read-level Error Model for Sequencing data","text":"can install development version dreams GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"JakobSkouPedersenLab/dreams\")"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"additional-setup-if-needed","dir":"","previous_headings":"Installation","what":"Additional Setup (If needed)","title":"Deep Read-level Error Model for Sequencing data","text":"encounter issues related TensorFlow integrations within R, install Keras within correct python environment ensure proper setup:","code":"keras::install_keras(envname = \"<ENVIRONMENT_NAME>\")"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"usage","dir":"","previous_headings":"Installation","what":"Usage","title":"Deep Read-level Error Model for Sequencing data","text":"installation, set environment start R session:","code":"reticulate::use_condaenv(\"<ENVIRONMENT_NAME>\", required = TRUE)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"basic-functions","dir":"","previous_headings":"","what":"Basic Functions","title":"Deep Read-level Error Model for Sequencing data","text":"section provides overview basic functions available dreams library.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"data-preparation-and-model-training","dir":"","previous_headings":"Basic Functions","what":"Data Preparation and Model Training","title":"Deep Read-level Error Model for Sequencing data","text":"first steps using DREAMS involve preparing data setting model training, crucial effective variant calling cancer detection.","code":"library(dreams)  # For training, DREAMS requires one or more BAM files and a reference genome. training_data = get_training_data(   bam_paths = \"/path/bam_file\",   reference_path = \"/path/hg38.fa\",   ...)   # Training the DREAMS Model using a Neural Network # Basic settings for Keras are required.  model = train_dreams_model(   training_data,   layers = c(128, 64, 32),   model_features = c(\"read_index\", \"strand\", \"trinucleotide_ctx\", \"first_in_pair\",                       \"umi_count\", \"seq_length\", \"fragment_size\", \"n_other_errors\",                       \"local_GC\"),   lr = 0.01,   batch_size = 32000,   epochs = 750,   model_file_path = NULL,   ...)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"feature-selection","dir":"","previous_headings":"Basic Functions > Data Preparation and Model Training","what":"Feature Selection","title":"Deep Read-level Error Model for Sequencing data","text":"DREAMS model supports variety features categorized numeric, categorical, embedded types:","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"numeric-features","dir":"","previous_headings":"Basic Functions > Data Preparation and Model Training > Feature Selection","what":"Numeric Features","title":"Deep Read-level Error Model for Sequencing data","text":"read_index, fragment_size, local_GC, umi_count, umi_errors, local_complexity_1, local_complexity_2, n_other_errors, prior_error, seq_length","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"categorical-features","dir":"","previous_headings":"Basic Functions > Data Preparation and Model Training > Feature Selection","what":"Categorical Features","title":"Deep Read-level Error Model for Sequencing data","text":"ref, strand, first_in_pair, ctx_minus1, ctx_plus1, chr, genomic_pos","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"embedded-feature","dir":"","previous_headings":"Basic Functions > Data Preparation and Model Training > Feature Selection","what":"Embedded Feature","title":"Deep Read-level Error Model for Sequencing data","text":"trinucleotide_ctx Ensure dataset used aligns selected features adjust parameters layers, lr, batch_size, epochs needed.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"variant-calling-and-cancer-detection-with-dreams","dir":"","previous_headings":"Basic Functions","what":"Variant Calling and Cancer Detection with DREAMS","title":"Deep Read-level Error Model for Sequencing data","text":"statistical methods dreams_vc dreams_cc can used variant calling cancer detection, respectively.","code":"# Call variants using DREAMS-vc  variant_calls = dreams_vc(   mutations_df = mutations_df,   bam_file_path = \"/path/test_bam_file\",   reference_path = \"/path/hg38.fa\",   model = model,   ...)  # Call cancer using DREAMS-cc  cancer_calls = dreams_cc(   mutations_df = mutations_df,   bam_file_path = \"/path/test_bam_file\",   reference_path = \"/path/hg38.fa\",   model = model,   ...)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"parallel-variant-calling-with-dreams_vc_parallel","dir":"","previous_headings":"Basic Functions","what":"Parallel Variant Calling with dreams_vc_parallel","title":"Deep Read-level Error Model for Sequencing data","text":"addition dreams_vc, DREAMS package offers dreams_vc_parallel parallel variant calling. function particularly useful working large datasets designed leverage computational resources multi-core CPUs parallel processing.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"when-to-use-dreams_vc_parallel","dir":"","previous_headings":"Basic Functions > Parallel Variant Calling with dreams_vc_parallel","what":"When to use dreams_vc_parallel","title":"Deep Read-level Error Model for Sequencing data","text":"Large Datasets: Efficiently handles larger datasets distributing workload across multiple cores. Parallel Processing Capability: Ideal computational environment supports parallel processing (e.g., multi-core systems).","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"example-usage","dir":"","previous_headings":"Basic Functions > Parallel Variant Calling with dreams_vc_parallel","what":"Example Usage","title":"Deep Read-level Error Model for Sequencing data","text":"","code":"# Parallel variant calling parallel_variant_calls = dreams_vc_parallel(   mutations_df = mutations_df,   bam_file_path = \"/path/test_bam_file\",   reference_path = \"/path/hg38.fa\",   model = model,   ...)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"saving-and-loading-models","dir":"","previous_headings":"Basic Functions","what":"Saving and Loading Models","title":"Deep Read-level Error Model for Sequencing data","text":"can save trained models later use load needed. save trained model, use save_model_hdf5 function keras package. Specify file path want save model. Similarly, training model using train_dreams_model function, can directly specify file path save model using model_file_path argument. allows automatic saving model upon training completion. default model_file_path = NULL, model won’t saved automatically. can manually save model using save_model_hdf5. load previously saved model, use load_model_hdf5 function.","code":"library(keras)  # Save the model save_model_hdf5(model, filepath = \"path/to/your_model.h5\")  # Load the model loaded_model <- load_model_hdf5(filepath = \"path/to/your_model.h5\")"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/index.html","id":"about-dreams","dir":"","previous_headings":"","what":"About DREAMS","title":"Deep Read-level Error Model for Sequencing data","text":"technical details describing DREAMS works please see article.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/bed_to_granges.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a BED File to a GRanges Object — bed_to_granges","title":"Convert a BED File to a GRanges Object — bed_to_granges","text":"function reads BED file converts GRanges object. BED files typically contain genomic intervals (like regions genome associated certain features annotations) formatted specific way. function adjusts zero-based indexing BED format one-based indexing used GRanges.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/bed_to_granges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a BED File to a GRanges Object — bed_to_granges","text":"","code":"bed_to_granges(bed_path)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/bed_to_granges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a BED File to a GRanges Object — bed_to_granges","text":"bed_pathA string specifying path BED file converted.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/bed_to_granges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a BED File to a GRanges Object — bed_to_granges","text":"GRanges object representing genomic intervals BED file.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/calc_string_entropy_k_mer.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Shannon Entropy for K-mers in a String — calc_string_entropy_k_mer","title":"Calculate Shannon Entropy for K-mers in a String — calc_string_entropy_k_mer","text":"function computes Shannon entropy possible k-mers within given string. Shannon entropy measure unpredictability k-mer composition, higher values indicating diversity. function useful bioinformatics analyzing complexity sequences.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/calc_string_entropy_k_mer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Shannon Entropy for K-mers in a String — calc_string_entropy_k_mer","text":"","code":"calc_string_entropy_k_mer(s, k = 2, alphabet = c(\"A\", \"C\", \"G\", \"T\", \"N\"))"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/calc_string_entropy_k_mer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Shannon Entropy for K-mers in a String — calc_string_entropy_k_mer","text":"s string Shannon entropy calculated. k size k-mers (substrings length k) considered entropy calculation. default value 2. alphabet vector characters representing possible nucleotides readings string. default set includes \"\", \"C\", \"G\", \"T\", \"N\".","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/calc_string_entropy_k_mer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Shannon Entropy for K-mers in a String — calc_string_entropy_k_mer","text":"Returns numeric value representing Shannon entropy k-mers string. entropy value measure randomness diversity k-mer composition.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_cancer.html","id":null,"dir":"Reference","previous_headings":"","what":"Call cancer from read positions — call_cancer","title":"Call cancer from read positions — call_cancer","text":"function evaluates presence cancer sample combining cancerous signal across catalogue candidate mutations.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_cancer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call cancer from read positions — call_cancer","text":"","code":"call_cancer(   mutations_df,   read_positions_df,   model,   beta,   alpha = 0.05,   calculate_confidence_intervals = FALSE,   use_turboem = TRUE )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_cancer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call cancer from read positions — call_cancer","text":"mutations_df data.frame() candidate mutations (SNVs) (chromosome, positions, reference alternative) read_positions_df data.frame() read-positions. See get_read_positions_from_BAM() model dreams model. See train_dreams_model(). beta sampling parameter get_training_data() correcting error-rates DREAMS model. alpha Alpha-level used testing confidence intervals. Default 0.05. calculate_confidence_intervals Logical. confidence intervals calculated? Default FALSE. use_turboem Logical. turboEM::turboem() used EM algorithm? Default TRUE.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_cancer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call cancer from read positions — call_cancer","text":"list() : cancer_info data.frame() results cancer calling across mutations: tf_est estiamted tumor fraction (allele fraction). tf_min, tf_max confidence interval tf_est. r_est, est_mutations_present estiamted fraction/number candidate mutations present sample. r_min, r_max confidence interval r_est. mutations_tested Number candidate mutations tested. total_coverage, total_count Total count coverage across mutations (reference alternative allele(s). mutations_tested Number candidate mutations tested. EM_converged EM algorithm converged. EM_steps, fpeval, objfeval Number steps function evaluations EM algorithm. ll_0, ll_A value log-likelihood function null (tf=0) alternative (tf>0) hypothesis. Q_val, df, p_val chisq test statistic, degrees freedom p-value statistical test. cancer_detected Whether cancer detected supplied alpha level. mutation_info data.frame() information individual mutations: chr, genomic_pos genomic position mutation. ref, alt reference alternative allele. P_mut_is_present estimated probability mutation present sample. exp_count expected count alternative allele error (null) model. count count alternative allele. coverage coverage used model (referenceredas alternative allele). obs_freq observed frequency alternative allele.","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_cancer_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Call cancer from read positions — call_cancer_indels","title":"Call cancer from read positions — call_cancer_indels","text":"function evaluates presence cancer sample combining cancerous signal across catalogue candidate mutations.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_cancer_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call cancer from read positions — call_cancer_indels","text":"","code":"call_cancer_indels(   mutations_df,   read_positions_df,   read_positions_df_indels,   model,   model_indels,   beta,   beta_indels,   alpha = 0.05,   calculate_confidence_intervals = FALSE,   use_turboem = TRUE )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_cancer_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call cancer from read positions — call_cancer_indels","text":"mutations_df data.frame() candidate mutations (SNVs) (chromosome, positions, reference alternative) read_positions_df data.frame() read-positions. See get_read_positions_from_BAM() model dreams model. See train_dreams_model(). beta sampling parameter get_training_data() correcting error-rates DREAMS model. alpha Alpha-level used testing confidence intervals. Default 0.05. calculate_confidence_intervals Logical. confidence intervals calculated? Default FALSE. use_turboem Logical. turboEM::turboem() used EM algorithm? Default TRUE.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_cancer_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call cancer from read positions — call_cancer_indels","text":"list() : cancer_info data.frame() results cancer calling across mutations: tf_est estiamted tumor fraction (allele fraction). tf_min, tf_max confidence interval tf_est. r_est, est_mutations_present estiamted fraction/number candidate mutations present sample. r_min, r_max confidence interval r_est. mutations_tested Number candidate mutations tested. total_coverage, total_count Total count coverage across mutations (reference alternative allele(s). mutations_tested Number candidate mutations tested. EM_converged EM algorithm converged. EM_steps, fpeval, objfeval Number steps function evaluations EM algorithm. ll_0, ll_A value log-likelihood function null (tf=0) alternative (tf>0) hypothesis. Q_val, df, p_val chisq test statistic, degrees freedom p-value statistical test. cancer_detected Whether cancer detected supplied alpha level. mutation_info data.frame() information individual mutations: chr, genomic_pos genomic position mutation. ref, alt reference alternative allele. P_mut_is_present estimated probability mutation present sample. exp_count expected count alternative allele error (null) model. count count alternative allele. coverage coverage used model (referenceredas alternative allele). obs_freq observed frequency alternative allele.","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_mutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Call mutations from read positions — call_mutations","title":"Call mutations from read positions — call_mutations","text":"function evaluate presence (calls) individual mutations predefined list.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_mutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call mutations from read positions — call_mutations","text":"","code":"call_mutations(   mutations_df,   read_positions_df,   model,   beta,   alpha = 0.05,   use_turboem = TRUE,   calculate_confidence_intervals = FALSE,   batch_size = NULL )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_mutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call mutations from read positions — call_mutations","text":"mutations_df data.frame() candidate mutations (SNVs) (chromosome, positions, reference alternative) read_positions_df data.frame() read-positions. See get_read_positions_from_BAM() model dreams model. See train_dreams_model(). beta sampling parameter get_training_data() correcting error-rates DREAMS model. alpha Alpha-level used testing confidence intervals. Default 0.05. use_turboem Logical. turboEM::turboem() used EM algorithm? Default TRUE. calculate_confidence_intervals Logical. confidence intervals calculated? Default FALSE. batch_size Number positions process time","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_mutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call mutations from read positions — call_mutations","text":"data.frame() information individual mutation calls, including: chr, genomic_pos genomic position mutation. ref, alt reference alternative allele. EM_converged EM algorithm converged. EM_steps, fpeval, objfeval Number steps function evaluations EM algorithm. tf_est estiamted tumor fraction (allele fraction). tf_min, tf_max confidence interval tf_est. exp_count expected count alternative allele error (null) model. count count alternative allele. coverage coverage used model (referenceredas alternative allele). full_coverage total coverage position (reference). obs_freq observed frequency alternative allele. ll_0, ll_A value log-likelihood function null (tf=0) alternative (tf>0) hypothesis. Q_val, df, p_val chisq test statistic, degrees freedom p-value statistical test. mutation_detected Whether mutation detected supplied alpha level.","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_mutations_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Call mutations from read positions — call_mutations_indels","title":"Call mutations from read positions — call_mutations_indels","text":"function evaluate presence (calls) individual mutations predefined list.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_mutations_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call mutations from read positions — call_mutations_indels","text":"","code":"call_mutations_indels(   mutations_df,   read_positions_df,   read_positions_df_indels,   model,   model_indels,   beta,   beta_indels,   alpha = 0.05,   use_turboem = TRUE,   calculate_confidence_intervals = FALSE,   batch_size = NULL )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_mutations_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call mutations from read positions — call_mutations_indels","text":"mutations_df data.frame() candidate mutations (SNVs) (chromosome, positions, reference alternative) read_positions_df data.frame() read-positions. See get_read_positions_from_BAM() model dreams model. See train_dreams_model(). beta sampling parameter get_training_data() correcting error-rates DREAMS model. alpha Alpha-level used testing confidence intervals. Default 0.05. use_turboem Logical. turboEM::turboem() used EM algorithm? Default TRUE. calculate_confidence_intervals Logical. confidence intervals calculated? Default FALSE. batch_size Number positions process time","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/call_mutations_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call mutations from read positions — call_mutations_indels","text":"data.frame() information individual mutation calls, including: chr, genomic_pos genomic position mutation. ref, alt reference alternative allele. EM_converged EM algorithm converged. EM_steps, fpeval, objfeval Number steps function evaluations EM algorithm. tf_est estiamted tumor fraction (allele fraction). tf_min, tf_max confidence interval tf_est. exp_count expected count alternative allele error (null) model. count count alternative allele. coverage coverage used model (referenceredas alternative allele). full_coverage total coverage position (reference). obs_freq observed frequency alternative allele. ll_0, ll_A value log-likelihood function null (tf=0) alternative (tf>0) hypothesis. Q_val, df, p_val chisq test statistic, degrees freedom p-value statistical test. mutation_detected Whether mutation detected supplied alpha level.","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/clean_insertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Insertions in CIGAR Sequence — clean_insertions","title":"Clean Insertions in CIGAR Sequence — clean_insertions","text":"function adjusts sequence CIGAR operations cleaning insertion operations. removes insertions follow deletions consolidates consecutive insertions follow operation deletions single insertion, removing operation precedes insertions.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/clean_insertions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Insertions in CIGAR Sequence — clean_insertions","text":"","code":"clean_insertions(expanded_cigar)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/clean_insertions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Insertions in CIGAR Sequence — clean_insertions","text":"expanded_cigar string representing sequence output expand_cigar.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/clean_insertions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Insertions in CIGAR Sequence — clean_insertions","text":"string CIGAR sequence cleaning insertion operations. example, 'MMDDIMMII' MMDDMI'.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/convert_to_cigar.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Expanded CIGAR String to Standard CIGAR Format — convert_to_cigar","title":"Convert Expanded CIGAR String to Standard CIGAR Format — convert_to_cigar","text":"function takes expanded CIGAR string (operation represented individually, e.g., \"MMMMMMMDDDDDDDMIDD\") converts standard CIGAR format (consecutive operations counted, e.g., \"7M7D1M1I2D\").","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/convert_to_cigar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Expanded CIGAR String to Standard CIGAR Format — convert_to_cigar","text":"","code":"convert_to_cigar(cleaned_cigar)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/convert_to_cigar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Expanded CIGAR String to Standard CIGAR Format — convert_to_cigar","text":"cleaned_cigar character string representing expanded CIGAR string.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/convert_to_cigar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Expanded CIGAR String to Standard CIGAR Format — convert_to_cigar","text":"character string standard CIGAR format.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/correct_pos_idx_w_cigar.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Position Indices in BAM Data with CIGAR Strings — correct_pos_idx_w_cigar","title":"Adjust Position Indices in BAM Data with CIGAR Strings — correct_pos_idx_w_cigar","text":"function takes dataframe containing BAM file data adjusts position indices based CIGAR strings. CIGAR strings BAM files provide information alignment reads reference genome, including insertions, deletions, padding. function processes CIGAR strings correct read positions accordingly, accounting insertions (), deletions (D), hard clips (H), matches/mismatches (M). adjusted position indices help accurately mapping reads back reference sequence.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/correct_pos_idx_w_cigar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Position Indices in BAM Data with CIGAR Strings — correct_pos_idx_w_cigar","text":"","code":"correct_pos_idx_w_cigar(df)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/correct_pos_idx_w_cigar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Position Indices in BAM Data with CIGAR Strings — correct_pos_idx_w_cigar","text":"df dataframe containing BAM file data, must include column CIGAR strings column position indices (pos_idx).","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/correct_pos_idx_w_cigar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Position Indices in BAM Data with CIGAR Strings — correct_pos_idx_w_cigar","text":"modified dataframe corrected position indices accounting CIGAR string operations. dataframe also includes additional columns detail size index insertions deletions, along logical column indicating whether position within deletion.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/correct_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct a DNA Sequence Based on a CIGAR String — correct_seq","title":"Correct a DNA Sequence Based on a CIGAR String — correct_seq","text":"function corrects DNA sequence based provided CIGAR string. first expands CIGAR string, inserts 'D's DNA sequence positions corresponding 'D's expanded CIGAR string. also replaces characters DNA sequence ''s positions corresponding ''s CIGAR string. applying modifications, function calls clean_insertions clean sequence.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/correct_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct a DNA Sequence Based on a CIGAR String — correct_seq","text":"","code":"correct_seq(cigar, sequence)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/correct_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct a DNA Sequence Based on a CIGAR String — correct_seq","text":"cigar string representing CIGAR sequence. character CIGAR string (M, , D) represents type alignment operation. sequence string representing DNA sequence needs corrected based CIGAR string.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/correct_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct a DNA Sequence Based on a CIGAR String — correct_seq","text":"DNA sequence string corrected based CIGAR string. function returns sequence applying deletions, insertions, cleaning clean_insertions function.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_cc.html","id":null,"dir":"Reference","previous_headings":"","what":"Call cancer from read positions in bam-file — dreams_cc","title":"Call cancer from read positions in bam-file — dreams_cc","text":"function evaluates presence cancer sample combining cancerous signal across catalogue candidate mutations.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_cc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call cancer from read positions in bam-file — dreams_cc","text":"","code":"dreams_cc(   mutations_df,   bam_file_path,   reference_path,   model,   alpha = 0.05,   calculate_confidence_intervals = FALSE,   use_turboem = TRUE )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_cc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call cancer from read positions in bam-file — dreams_cc","text":"mutations_df data.frame() candidate mutations (SNVs) (chromosome, positions, reference alternative) bam_file_path Path .BAM-file reference_path Path reference genome e.g. FASTA-file. model dreams model. See train_dreams_model(). alpha Alpha-level used testing confidence intervals. Default 0.05. calculate_confidence_intervals Logical. confidence intervals calculated? Default FALSE. use_turboem Logical. turboEM::turboem() used EM algorithm? Default TRUE.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_cc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call cancer from read positions in bam-file — dreams_cc","text":"list() : cancer_info data.frame() results cancer calling across mutations: tf_est estiamted tumor fraction (allele fraction). tf_min, tf_max confidence interval tf_est. r_est, est_mutations_present estiamted fraction/number candidate mutations present sample. r_min, r_max confidence interval r_est. mutations_tested Number candidate mutations tested. total_coverage, total_count Total count coverage across mutations (reference alternative allele(s). mutations_tested Number candidate mutations tested. EM_converged EM algorithm converged. EM_steps, fpeval, objfeval Number steps function evaluations EM algorithm. ll_0, ll_A value log-likelihood function null (tf=0) alternative (tf>0) hypothesis. Q_val, df, p_val chisq test statistic, degrees freedom p-value statistical test. cancer_detected Whether cancer detected supplied alpha level. mutation_info data.frame() information individual mutations: chr, genomic_pos genomic position mutation. ref, alt reference alternative allele. P_mut_is_present estimated probability mutation present sample. exp_count expected count alternative allele error (null) model. count count alternative allele. coverage coverage used model (referenceredas alternative allele). obs_freq observed frequency alternative allele.","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_cc_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Cancer Detection in Indels Using DREAMS — dreams_cc_indels","title":"Cancer Detection in Indels Using DREAMS — dreams_cc_indels","text":"function performs cancer detection based indel information BAM file using predefined list mutations. processes mutations data uses provided model make cancer calls.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_cc_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cancer Detection in Indels Using DREAMS — dreams_cc_indels","text":"","code":"dreams_cc_indels(   mutations_df,   bam_file_path,   reference_path,   model,   model_indels,   alpha = 0.05,   calculate_confidence_intervals = FALSE,   use_turboem = TRUE )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_cc_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cancer Detection in Indels Using DREAMS — dreams_cc_indels","text":"mutations_df dataframe containing list mutations analyzed. bam_file_path Path BAM file containing sequencing data. reference_path Path reference genome file, typically FASTA format. model model used cancer detection. model_indels model used calling mutations indels. alpha Significance level statistical testing, default 0.05. calculate_confidence_intervals Logical flag indicating whether calculate confidence intervals, default FALSE. use_turboem Logical flag indicating whether use turboEM algorithm, default TRUE.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_cc_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cancer Detection in Indels Using DREAMS — dreams_cc_indels","text":"list() : cancer_info data.frame() results cancer calling across mutations: tf_est estiamted tumor fraction (allele fraction). tf_min, tf_max confidence interval tf_est. r_est, est_mutations_present estiamted fraction/number candidate mutations present sample. r_min, r_max confidence interval r_est. mutations_tested Number candidate mutations tested. total_coverage, total_count Total count coverage across mutations (reference alternative allele(s). mutations_tested Number candidate mutations tested. EM_converged EM algorithm converged. EM_steps, fpeval, objfeval Number steps function evaluations EM algorithm. ll_0, ll_A value log-likelihood function null (tf=0) alternative (tf>0) hypothesis. Q_val, df, p_val chisq test statistic, degrees freedom p-value statistical test. cancer_detected Whether cancer detected supplied alpha level. mutation_info data.frame() information individual mutations: chr, genomic_pos genomic position mutation. ref, alt reference alternative allele. P_mut_is_present estimated probability mutation present sample. exp_count expected count alternative allele error (null) model. count count alternative allele. coverage coverage used model (referenceredas alternative allele). obs_freq observed frequency alternative allele.","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_vc.html","id":null,"dir":"Reference","previous_headings":"","what":"Call mutations in a bam-file — dreams_vc","title":"Call mutations in a bam-file — dreams_vc","text":"function evaluate presence (calls) individual mutations predefined list.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_vc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call mutations in a bam-file — dreams_vc","text":"","code":"dreams_vc(   mutations_df,   bam_file_path,   reference_path,   model,   alpha = 0.05,   use_turboem = TRUE,   calculate_confidence_intervals = FALSE,   batch_size = NULL )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_vc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call mutations in a bam-file — dreams_vc","text":"mutations_df data.frame() candidate mutations (SNVs) (chromosome, positions, reference alternative) bam_file_path Path .BAM-file reference_path Path reference genome e.g. FASTA-file. model dreams model. See train_dreams_model(). alpha Alpha-level used testing confidence intervals. Default 0.05. use_turboem Logical. turboEM::turboem() used EM algorithm? Default TRUE. calculate_confidence_intervals Logical. confidence intervals calculated? Default FALSE. batch_size Number positions process time","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_vc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call mutations in a bam-file — dreams_vc","text":"data.frame() information individual mutation calls, including: chr, genomic_pos genomic position mutation. ref, alt reference alternative allele. EM_converged EM algorithm converged. EM_steps, fpeval, objfeval Number steps function evaluations EM algorithm. tf_est estiamted tumor fraction (allele fraction). tf_min, tf_max confidence interval tf_est. exp_count expected count alternative allele error (null) model. count count alternative allele. coverage coverage used model (referenceredas alternative allele). full_coverage total coverage position (reference). obs_freq observed frequency alternative allele. ll_0, ll_A value log-likelihood function null (tf=0) alternative (tf>0) hypothesis. Q_val, df, p_val chisq test statistic, degrees freedom p-value statistical test. mutation_detected Whether mutation detected supplied alpha level.","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_vc_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Variant Calling in Indels — dreams_vc_indels","title":"Variant Calling in Indels — dreams_vc_indels","text":"function performs variant calling indels given BAM file using predefined list mutations. processes mutations data, batch processes genomic positions, calls mutations using specific model.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_vc_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variant Calling in Indels — dreams_vc_indels","text":"","code":"dreams_vc_indels(   mutations_df,   bam_file_path,   reference_path,   model,   model_indels,   alpha = 0.05,   use_turboem = TRUE,   calculate_confidence_intervals = FALSE,   batch_size = NULL )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_vc_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variant Calling in Indels — dreams_vc_indels","text":"mutations_df dataframe containing list mutations analyzed. bam_file_path Path BAM file containing sequencing data. reference_path Path reference genome file, typically FASTA format. model model used calling mutations SNVs. model_indels model used calling mutations indels. alpha Significance level statistical testing, default 0.05. use_turboem Logical flag indicating whether use turboEM algorithm, default TRUE. calculate_confidence_intervals Logical flag indicating whether calculate confidence intervals, default FALSE. batch_size Number positions process batch; NULL, determined based data.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_vc_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variant Calling in Indels — dreams_vc_indels","text":"data.frame() information individual mutation calls, including: chr, genomic_pos genomic position mutation. ref, alt reference alternative allele. EM_converged EM algorithm converged. EM_steps, fpeval, objfeval Number steps function evaluations EM algorithm. tf_est estiamted tumor fraction (allele fraction). tf_min, tf_max confidence interval tf_est. exp_count expected count alternative allele error (null) model. count count alternative allele. coverage coverage used model (referenceredas alternative allele). full_coverage total coverage position (reference). obs_freq observed frequency alternative allele. ll_0, ll_A value log-likelihood function null (tf=0) alternative (tf>0) hypothesis. Q_val, df, p_val chisq test statistic, degrees freedom p-value statistical test. mutation_detected Whether mutation detected supplied alpha level.","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_vc_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Call mutations in a bam-file — dreams_vc_parallel","title":"Call mutations in a bam-file — dreams_vc_parallel","text":"function evaluate presence (calls) individual mutations predefined list.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_vc_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call mutations in a bam-file — dreams_vc_parallel","text":"","code":"dreams_vc_parallel(   mutations_df,   bam_file_path,   reference_path,   model,   alpha = 0.05,   use_turboem = TRUE,   calculate_confidence_intervals = FALSE,   batch_size = NULL,   ncores = 1,   log_file = NULL )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_vc_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call mutations in a bam-file — dreams_vc_parallel","text":"mutations_df data.frame() candidate mutations (SNVs) (chromosome, positions, reference alternative) bam_file_path Path .BAM-file reference_path Path reference genome e.g. FASTA-file. model dreams model. See train_dreams_model(). alpha Alpha-level used testing confidence intervals. Default 0.05. use_turboem Logical. turboEM::turboem() used EM algorithm? Default TRUE. calculate_confidence_intervals Logical. confidence intervals calculated? Default FALSE. batch_size Number positions process time ncores Number processing cores log_file write log-file path","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/dreams_vc_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call mutations in a bam-file — dreams_vc_parallel","text":"data.frame() information individual mutation calls, including: chr, genomic_pos genomic position mutation. ref, alt reference alternative allele. EM_converged EM algorithm converged. EM_steps, fpeval, objfeval Number steps function evaluations EM algorithm. tf_est estiamted tumor fraction (allele fraction). tf_min, tf_max confidence interval tf_est. exp_count expected count alternative allele error (null) model. count count alternative allele. coverage coverage used model (referenceredas alternative allele). full_coverage total coverage position (reference). obs_freq observed frequency alternative allele. ll_0, ll_A value log-likelihood function null (tf=0) alternative (tf>0) hypothesis. Q_val, df, p_val chisq test statistic, degrees freedom p-value statistical test. mutation_detected Whether mutation detected supplied alpha level.","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/expand_cigar.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand CIGAR String into Sequence of Operations — expand_cigar","title":"Expand CIGAR String into Sequence of Operations — expand_cigar","text":"function expands condensed CIGAR string sequence operations.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/expand_cigar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand CIGAR String into Sequence of Operations — expand_cigar","text":"","code":"expand_cigar(cigar)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/expand_cigar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand CIGAR String into Sequence of Operations — expand_cigar","text":"cigar character string representing CIGAR operations alignment.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/expand_cigar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand CIGAR String into Sequence of Operations — expand_cigar","text":"character string CIGAR operation expanded show full sequence alignment operations. example, '2M1I' expand 'MMI'.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_features_from_bam.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Features from BAM Data — extract_features_from_bam","title":"Extract Features from BAM Data — extract_features_from_bam","text":"Extract Features BAM Data","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_features_from_bam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Features from BAM Data — extract_features_from_bam","text":"","code":"extract_features_from_bam(   bam_df,   reference_path,   add_umi_features = all(c(\"cd\", \"ce\") %in% colnames(bam_df)) )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_features_from_bam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Features from BAM Data — extract_features_from_bam","text":"bam_df DataFrame originating 'load_BAM' processed extract_mismatch_positions' containing alignment data. reference_path Path reference genome file FASTA format. add_umi_features Check umi information available.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_features_from_bam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Features from BAM Data — extract_features_from_bam","text":"DataFrame extracted features, including read positions possibly UMI data.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_features_from_bam_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Features from BAM Data — extract_features_from_bam_indels","title":"Extract Features from BAM Data — extract_features_from_bam_indels","text":"Extract Features BAM Data","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_features_from_bam_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Features from BAM Data — extract_features_from_bam_indels","text":"","code":"extract_features_from_bam_indels(   bam_df,   reference_path,   add_umi_features = all(c(\"cd\", \"ce\") %in% colnames(bam_df)) )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_features_from_bam_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Features from BAM Data — extract_features_from_bam_indels","text":"bam_df DataFrame originating 'load_BAM' processed extract_indel_info' containing alignment data. reference_path Path reference genome file FASTA format. add_umi_features Check umi information available.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_features_from_bam_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Features from BAM Data — extract_features_from_bam_indels","text":"DataFrame extracted features, including read positions possibly UMI data.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_indel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Indel Information from BAM Data Frame — extract_indel_info","title":"Extract Indel Information from BAM Data Frame — extract_indel_info","text":"function processes data frame containing BAM file information extract indel information. filters rows insertions deletions, calculates indel lengths types, generates genomic positions indel sequences.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_indel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Indel Information from BAM Data Frame — extract_indel_info","text":"","code":"extract_indel_info(bam_df)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_indel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Indel Information from BAM Data Frame — extract_indel_info","text":"bam_df data frame containing BAM file information, including columns position (pos), CIGAR string (cigar), sequence (seq).","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_indel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Indel Information from BAM Data Frame — extract_indel_info","text":"modified version input data frame bam_df, includes additional columns genomic position (genomic_pos), indel length (indel_length), indel type (indel_type), indel sequence (indel_seq). row corresponds indel event.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_mismatch_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract mismatch positions from BAM data — extract_mismatch_positions","title":"Extract mismatch positions from BAM data — extract_mismatch_positions","text":"function filters dataframe reads contain mismatches compared reference genome, indicated MD tag within BAM data. extracts genomic positions mismatches, providing detailed account sequencing reads match reference sequence.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_mismatch_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract mismatch positions from BAM data — extract_mismatch_positions","text":"","code":"extract_mismatch_positions(bam_df)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_mismatch_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract mismatch positions from BAM data — extract_mismatch_positions","text":"bam_df dataframe obtained load_BAM function.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/extract_mismatch_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract mismatch positions from BAM data — extract_mismatch_positions","text":"dataframe mismatch positions, includes genomic positions identified mismatches across reads.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/filter_mismatch_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Mismatch Positions in Sequencing Data — filter_mismatch_positions","title":"Filter Mismatch Positions in Sequencing Data — filter_mismatch_positions","text":"function filters read positions sequencing data based mismatch rates specific genomic regions. designed process data BAM files can include exclude specific regions positions needed.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/filter_mismatch_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Mismatch Positions in Sequencing Data — filter_mismatch_positions","text":"","code":"filter_mismatch_positions(   read_positions,   bam_file,   mm_rate_max = 1,   bed_include_path = NULL,   positions_to_exclude_paths = NULL )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/filter_mismatch_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Mismatch Positions in Sequencing Data — filter_mismatch_positions","text":"read_positions dataframe containing positions reads (fx df obtained extract_features_from_bam()) . row represent unique read position relevant information observed nucleotides. bam_file string specifying path BAM file. mm_rate_max numeric value representing maximum mismatch rate allowed positions. Defaults 1. Positions mismatch rate higher threshold excluded. bed_include_path optional string specifying path BED file contains genomic regions include analysis. NULL, regions included. positions_to_exclude_paths optional vector strings specifying paths files containing positions excluded analysis. NULL, positions excluded.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/filter_mismatch_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Mismatch Positions in Sequencing Data — filter_mismatch_positions","text":"list two elements: data containing filtered read positions dataframe, info containing dataframe summary information number mismatches total coverage.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — fit_model","title":"Title — fit_model","text":"Title","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — fit_model","text":"","code":"fit_model(   features,   labels,   input_structure,   lr,   batch_size,   epochs,   min_delta,   patience,   validation_split,   model_file_path,   log_file_path = NULL )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — fit_model","text":"features input features labels input labels input_structure input structure lr learning rate batch_size batch size epochs number training epochs min_delta minimum delta early stopping patience patience early stopping validation_split validation split model_file_path output model file path log_file_path output log file path","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — fit_model","text":"fitted model","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/fit_model_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — fit_model_indels","title":"Title — fit_model_indels","text":"Title","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/fit_model_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — fit_model_indels","text":"","code":"fit_model_indels(   features,   labels,   input_structure,   lr,   batch_size,   epochs,   min_delta,   patience,   validation_split,   model_file_path,   log_file_path = NULL )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/fit_model_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — fit_model_indels","text":"features input features labels input labels input_structure input structure lr learning rate batch_size batch size epochs number training epochs min_delta minimum delta early stopping patience patience early stopping validation_split validation split model_file_path output model file path log_file_path output log file path","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/fit_model_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — fit_model_indels","text":"fitted model","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/generate_NN_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — generate_NN_structure","title":"Title — generate_NN_structure","text":"Title","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/generate_NN_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — generate_NN_structure","text":"","code":"generate_NN_structure(inputs, input_layer, layers, reg = 0)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/generate_NN_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — generate_NN_structure","text":"inputs input structure input_layer input layer layers layer sizes reg regularization","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/generate_NN_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — generate_NN_structure","text":"NN structure","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/generate_NN_structure_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Neural Network Structure for Indel Analysis — generate_NN_structure_indels","title":"Generate Neural Network Structure for Indel Analysis — generate_NN_structure_indels","text":"function builds neural network structure indel analysis. takes input layer iteratively adds specified hidden layers, followed output layer classification.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/generate_NN_structure_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Neural Network Structure for Indel Analysis — generate_NN_structure_indels","text":"","code":"generate_NN_structure_indels(inputs, input_layer, layers, reg = 0)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/generate_NN_structure_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Neural Network Structure for Indel Analysis — generate_NN_structure_indels","text":"inputs input structure neural network, usually data input layer. input_layer initial layer neural network additional layers added. layers list vector indicating number units hidden layer network. reg Regularization parameter applied dense layer preventing overfitting. Defaults 0.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/generate_NN_structure_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Neural Network Structure for Indel Analysis — generate_NN_structure_indels","text":"keras model object representing constructed neural network.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_genomic_pos.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Genomic Positions of Indels from a CIGAR String — get_indel_genomic_pos","title":"Extract Genomic Positions of Indels from a CIGAR String — get_indel_genomic_pos","text":"function uses get_indel_info function extract genomic positions indels given CIGAR string, starting specified genomic position.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_genomic_pos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Genomic Positions of Indels from a CIGAR String — get_indel_genomic_pos","text":"","code":"get_indel_genomic_pos(pos, cigar)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_genomic_pos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Genomic Positions of Indels from a CIGAR String — get_indel_genomic_pos","text":"pos Integer, starting genomic position CIGAR string analysis. cigar String, CIGAR string representing genomic alignments.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_genomic_pos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Genomic Positions of Indels from a CIGAR String — get_indel_genomic_pos","text":"integer vector containing genomic positions indels CIGAR string.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Indel Information from CIGAR String and Genomic Position — get_indel_info","title":"Extract Indel Information from CIGAR String and Genomic Position — get_indel_info","text":"function takes genomic position CIGAR string input extracts information indels. processes CIGAR string determine genomic positions, lengths, indel type.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Indel Information from CIGAR String and Genomic Position — get_indel_info","text":"","code":"get_indel_info(pos, cigar)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Indel Information from CIGAR String and Genomic Position — get_indel_info","text":"pos integer representing starting genomic position CIGAR string. cigar character string representing CIGAR format.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Indel Information from CIGAR String and Genomic Position — get_indel_info","text":"list containing following elements: - genomic_pos: integer vector genomic positions indels. - indel_length: integer vector lengths indels. - indel_type: character vector types indels (either '' insertion 'D' deletion).","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Lengths of Indels from a CIGAR String — get_indel_length","title":"Extract Lengths of Indels from a CIGAR String — get_indel_length","text":"function uses get_indel_info function extract lengths indels given CIGAR string, starting specified genomic position.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Lengths of Indels from a CIGAR String — get_indel_length","text":"","code":"get_indel_length(pos, cigar)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Lengths of Indels from a CIGAR String — get_indel_length","text":"pos Integer, starting genomic position CIGAR string analysis. cigar String, CIGAR string representing genomic alignments.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Lengths of Indels from a CIGAR String — get_indel_length","text":"integer vector containing lengths indels CIGAR string.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Types of Indels from a CIGAR String — get_indel_type","title":"Extract Types of Indels from a CIGAR String — get_indel_type","text":"function utilizes get_indel_info determine types indels given CIGAR string.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Types of Indels from a CIGAR String — get_indel_type","text":"","code":"get_indel_type(pos, cigar)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Types of Indels from a CIGAR String — get_indel_type","text":"pos Integer, starting genomic position CIGAR string. cigar String, CIGAR string representing genomic alignments.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indel_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Types of Indels from a CIGAR String — get_indel_type","text":"character vector containing types indels (either '' insertions 'D' deletions) CIGAR string.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indels_start_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Start Positions of Indels from a CIGAR String — get_indels_start_positions","title":"Extract Start Positions of Indels from a CIGAR String — get_indels_start_positions","text":"function analyzes CIGAR string extracts start positions insertions deletions. parses CIGAR string, calculates cumulative lengths operations, identifies start positions '' 'D' segments.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indels_start_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Start Positions of Indels from a CIGAR String — get_indels_start_positions","text":"","code":"get_indels_start_positions(cigar)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indels_start_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Start Positions of Indels from a CIGAR String — get_indels_start_positions","text":"cigar character string representing CIGAR format.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_indels_start_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Start Positions of Indels from a CIGAR String — get_indels_start_positions","text":"integer vector containing start positions insertion deletion CIGAR string. Positions 1-based.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_match_genomic_pos_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get_match_genomic_pos_list — get_match_genomic_pos_list","title":"Get_match_genomic_pos_list — get_match_genomic_pos_list","text":"Get_match_genomic_pos_list","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_match_genomic_pos_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get_match_genomic_pos_list — get_match_genomic_pos_list","text":"","code":"get_match_genomic_pos_list(pos, cigar, MDtag)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_match_genomic_pos_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get_match_genomic_pos_list — get_match_genomic_pos_list","text":"pos position_list cigar cigar string list MDtag mdtag list","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_match_genomic_pos_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get_match_genomic_pos_list — get_match_genomic_pos_list","text":"match_positions","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_mismatch_genomic_pos_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of genomic positions with mismatches — get_mismatch_genomic_pos_list","title":"Get list of genomic positions with mismatches — get_mismatch_genomic_pos_list","text":"function computes genomic positions mismatches sequencing reads based MD tag BAM files. MD tag describes read aligns reference genome, including mismatches. function identifies mismatches computes positions relative start alignment, aiding variant calling analysis sequencing errors.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_mismatch_genomic_pos_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of genomic positions with mismatches — get_mismatch_genomic_pos_list","text":"","code":"get_mismatch_genomic_pos_list(pos, MDtag)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_mismatch_genomic_pos_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of genomic positions with mismatches — get_mismatch_genomic_pos_list","text":"pos Genomic position MDtag MD tag string BAM file contains information matches, mismatches, deletions read alignment.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_mismatch_genomic_pos_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of genomic positions with mismatches — get_mismatch_genomic_pos_list","text":"list genomic positions mismatches occur, corresponding MD tag provided.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_read_positions_from_BAM.html","id":null,"dir":"Reference","previous_headings":"","what":"Get read positions from BAM-file — get_read_positions_from_BAM","title":"Get read positions from BAM-file — get_read_positions_from_BAM","text":"functions extracts information read position cover positions interest BAM-file.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_read_positions_from_BAM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get read positions from BAM-file — get_read_positions_from_BAM","text":"","code":"get_read_positions_from_BAM(   bam_file_path,   chr,   genomic_pos,   reference_path,   batch_size = NULL )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_read_positions_from_BAM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get read positions from BAM-file — get_read_positions_from_BAM","text":"bam_file_path Path BAM-file. chr, genomic_pos Vectors. specify positions interest (chr = Chromosome, genomic_pos = Position chromosome) reference_path Path reference genome e.g. FASTA-file. batch_size Number positions process time","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_read_positions_from_BAM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get read positions from BAM-file — get_read_positions_from_BAM","text":"data.frame(). line describes position read.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_read_positions_from_BAM_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get read positions from BAM-file — get_read_positions_from_BAM_indels","title":"Get read positions from BAM-file — get_read_positions_from_BAM_indels","text":"functions extracts information read position cover positions interest BAM-file.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_read_positions_from_BAM_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get read positions from BAM-file — get_read_positions_from_BAM_indels","text":"","code":"get_read_positions_from_BAM_indels(   bam_file_path,   chr,   genomic_pos,   reference_path,   batch_size = NULL )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_read_positions_from_BAM_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get read positions from BAM-file — get_read_positions_from_BAM_indels","text":"bam_file_path Path BAM-file. chr, genomic_pos Vectors. specify positions interest (chr = Chromosome, genomic_pos = Position chromosome) reference_path Path reference genome e.g. FASTA-file. batch_size Number positions process time","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_read_positions_from_BAM_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get read positions from BAM-file — get_read_positions_from_BAM_indels","text":"data.frame(). line describes position read.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_reference_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Get reference sequence — get_reference_seq","title":"Get reference sequence — get_reference_seq","text":"Get reference sequence","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_reference_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get reference sequence — get_reference_seq","text":"","code":"get_reference_seq(chr, genomic_pos, buffer, reference_path)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_reference_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get reference sequence — get_reference_seq","text":"chr chromosome genomic_pos genomic_position buffer many neighbors include reference_path reference genome fa","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract training data from BAM files — get_training_data","title":"Extract training data from BAM files — get_training_data","text":"Extract training data BAM files","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract training data from BAM files — get_training_data","text":"","code":"get_training_data(   bam_paths,   reference_path,   bed_include_path = NULL,   factor = 1,   common_positions_to_exclude_paths = NULL,   positions_to_exclude_paths = NULL,   mm_rate_max = 1,   verbose = F )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract training data from BAM files — get_training_data","text":"bam_paths Vector strings. Paths .bam files extract training data . reference_path String. Path reference genome fasta file. bed_include_path String. Path bed-file regions include. Default NULL. factor Number 0 1. Ratio negative positive data. Default 1. common_positions_to_exclude_paths Vector strings. List files positions exclude samples. Default NULL. positions_to_exclude_paths Vector strings. List files positions exclude training length equal number samples. Default NULL. mm_rate_max Number 0 1. Maximum mismatch rate position. Default 1. verbose TODO: Write ","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract training data from BAM files — get_training_data","text":"list containing two elements: data: tbl_df dimensions 2 x 22. info: data.frame dimensions 1 x 4.","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data_from_bam.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — get_training_data_from_bam","title":"Title — get_training_data_from_bam","text":"Title","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data_from_bam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — get_training_data_from_bam","text":"","code":"get_training_data_from_bam(   bam_path,   reference_path,   bed_include_path = NULL,   factor = 1,   positions_to_exclude_paths = NULL,   mm_rate_max = 1 )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data_from_bam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — get_training_data_from_bam","text":"bam_path Path BAM file reference_path Path reference file bed_include_path BED regions include factor ratio negative positive data positions_to_exclude_paths positions exclude training mm_rate_max maximum mismatch rate position","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data_from_bam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — get_training_data_from_bam","text":"data.frame training data .bam file","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data_from_bam_indel.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Training Data from BAM File (indels) — get_training_data_from_bam_indel","title":"Extract Training Data from BAM File (indels) — get_training_data_from_bam_indel","text":"Extracts training data BAM file integrating information reference BED files. processes genomic positions indels, extracts features, filters based mismatch rates, combines positive negative samples form training dataset.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data_from_bam_indel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Training Data from BAM File (indels) — get_training_data_from_bam_indel","text":"","code":"get_training_data_from_bam_indel(   bam_path,   reference_path,   bed_include_path = NULL,   factor = 1,   positions_to_exclude_paths = NULL,   mm_rate_max = 1 )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data_from_bam_indel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Training Data from BAM File (indels) — get_training_data_from_bam_indel","text":"bam_path Path BAM file. reference_path Path reference genome file. bed_include_path Optional; BED file defining regions include analysis. factor ratio negative positive data output. positions_to_exclude_paths Optional; paths files defining positions exclude training. mm_rate_max Maximum mismatch rate allowed position.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data_from_bam_indel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Training Data from BAM File (indels) — get_training_data_from_bam_indel","text":"list two elements: data, data.frame containing combined positive negative training data, info, data.frame containing metadata training set.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract training data from BAM files (indel) — get_training_data_indels","title":"Extract training data from BAM files (indel) — get_training_data_indels","text":"Extract training data BAM files (indel)","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract training data from BAM files (indel) — get_training_data_indels","text":"","code":"get_training_data_indels(   bam_paths,   reference_path,   bed_include_path = NULL,   factor = 1,   common_positions_to_exclude_paths = NULL,   positions_to_exclude_paths = NULL,   mm_rate_max = 1,   verbose = F )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract training data from BAM files (indel) — get_training_data_indels","text":"bam_paths Vector strings. Paths .bam files extract training data . reference_path String. Path reference genome fasta file. bed_include_path String. Path bed-file regions include. Default NULL. factor Number 0 1. Ratio negative positive data. Default 1. common_positions_to_exclude_paths Vector strings. List files positions exclude samples. Default NULL. positions_to_exclude_paths Vector strings. List files positions exclude training length equal number samples. Default NULL. mm_rate_max Number 0 1. Maximum mismatch rate position. Default 1. verbose TODO: Write ","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/get_training_data_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract training data from BAM files (indel) — get_training_data_indels","text":"list containing two elements: data: tbl_df info: data.frame","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/hardclip_correct_umi_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Hard clip correct UMI features (ce and cd) — hardclip_correct_umi_features","title":"Hard clip correct UMI features (ce and cd) — hardclip_correct_umi_features","text":"function identifies corrects hard clipped bases UMI (Unique Molecular Identifier) features within sequencing data. Hard clipping, indicated 'H' CIGAR string BAM file, refers bases sequence aligned reference genome therefore included read. function adjusts UMI feature sequences accordingly ensure aligned portions UMIs considered downstream analyses. function applies corrections 'ce' 'cd' UMI feature columns provided dataframe.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/hardclip_correct_umi_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard clip correct UMI features (ce and cd) — hardclip_correct_umi_features","text":"","code":"hardclip_correct_umi_features(df)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/hardclip_correct_umi_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard clip correct UMI features (ce and cd) — hardclip_correct_umi_features","text":"df data.frame converted lists--lists (scanBam)","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/hardclip_correct_umi_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hard clip correct UMI features (ce and cd) — hardclip_correct_umi_features","text":"data.frame corrected UMI features","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/load_BAM.html","id":null,"dir":"Reference","previous_headings":"","what":"Load .BAM file into R as tibble — load_BAM","title":"Load .BAM file into R as tibble — load_BAM","text":"function reads alignment data .BAM file formats tibble (data frame) R. allows selection specific genomic regions specifying chromosomes positions, extracts relevant alignment data including tags analysis. function also includes processing UMI tags correction hard clips CIGAR strings.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/load_BAM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load .BAM file into R as tibble — load_BAM","text":"","code":"load_BAM(BamPath, chr = NULL, pos = NULL)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/load_BAM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load .BAM file into R as tibble — load_BAM","text":"BamPath file path .BAM file loaded. chr vector chromosome identifiers indicating chromosomes interest analysis. (strings) pos vector numeric positions indicating specific locations interest within chromosomes. (numeric)","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/load_BAM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load .BAM file into R as tibble — load_BAM","text":"tibble (data frame) containing extracted alignment data .BAM file, including processed UMI features genomic positions, well necessary corrections alignment issues hard clipping.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_input_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — prepare_input_layer","title":"Title — prepare_input_layer","text":"Title","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_input_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — prepare_input_layer","text":"","code":"prepare_input_layer(training_data_features, ctx3_embed_dim)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_input_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — prepare_input_layer","text":"training_data_features training data features ctx3_embed_dim trinucleotide context embedding dimensions","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_input_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — prepare_input_layer","text":"input layer","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_input_layer_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Input Layer for Indel Analysis in Neural Network — prepare_input_layer_indels","title":"Prepare Input Layer for Indel Analysis in Neural Network — prepare_input_layer_indels","text":"function processes training data features context embedding dimensions prepare input layer suitable neural network model indel analysis.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_input_layer_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Input Layer for Indel Analysis in Neural Network — prepare_input_layer_indels","text":"","code":"prepare_input_layer_indels(training_data_features, ctx3_embed_dim)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_input_layer_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Input Layer for Indel Analysis in Neural Network — prepare_input_layer_indels","text":"training_data_features data frame similar structure containing features training data. ctx3_embed_dim Integer specifying dimension embedding trinucleotide context sequences.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_input_layer_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Input Layer for Indel Analysis in Neural Network — prepare_input_layer_indels","text":"list containing two elements: inputs, raw input dataset, input_layer, prepared input layer neural network model.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare training data — prepare_training_data","title":"Prepare training data — prepare_training_data","text":"Prepare training data","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare training data — prepare_training_data","text":"","code":"prepare_training_data(training_data, model_features)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare training data — prepare_training_data","text":"training_data training data model_features selected features","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare training data — prepare_training_data","text":"prepared training data","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_training_data_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Training Data with Indel Information — prepare_training_data_indels","title":"Prepare Training Data with Indel Information — prepare_training_data_indels","text":"function processes training data selecting specific features observed values (obs) genomic data, including nucleotide bases indels (insertions '' deletions 'D'). prepares data use machine learning models, particularly require categorical data converted one-hot encoded format.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_training_data_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Training Data with Indel Information — prepare_training_data_indels","text":"","code":"prepare_training_data_indels(training_data, model_features)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_training_data_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Training Data with Indel Information — prepare_training_data_indels","text":"training_data data frame containing training data. model_features vector selected feature names used model.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/prepare_training_data_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Training Data with Indel Information — prepare_training_data_indels","text":"list two elements: features containing selected features training data, labels containing one-hot encoded labels.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/remove_hardclips.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Hard Clipping from CIGAR Strings in a DataFrame — remove_hardclips","title":"Remove Hard Clipping from CIGAR Strings in a DataFrame — remove_hardclips","text":"function processes dataframe containing CIGAR strings one columns. removes hard clipping ('H') deletions ('D') beginning end CIGAR string. Hard clipping deletions contribute alignment sequence, removal simplifies processing strings.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/remove_hardclips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Hard Clipping from CIGAR Strings in a DataFrame — remove_hardclips","text":"","code":"remove_hardclips(df)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/remove_hardclips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Hard Clipping from CIGAR Strings in a DataFrame — remove_hardclips","text":"df dataframe column named 'cigar', contains CIGAR strings.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/remove_hardclips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Hard Clipping from CIGAR Strings in a DataFrame — remove_hardclips","text":"dataframe identical input, except CIGAR strings 'cigar' column modified exclude initial terminal hard clipping deletions.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/remove_softclips.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove softclips — remove_softclips","title":"Remove softclips — remove_softclips","text":"function processes dataframe obtained BAM file removes soft clipped bases sequences. Soft clipping (indicated 'S' CIGAR string) refers bases present sequencing read used alignment reference genome. function trims soft clipped bases sequence (seq) quality scores (qual), also adjusts CIGAR string accordingly. UMI features present, also trim .","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/remove_softclips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove softclips — remove_softclips","text":"","code":"remove_softclips(df)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/remove_softclips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove softclips — remove_softclips","text":"df dataframe load_BAM","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/remove_softclips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove softclips — remove_softclips","text":"new dataframe softclipped bases removed","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/sample_negative_read_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample_negative_read_positions — sample_negative_read_positions","title":"Sample_negative_read_positions — sample_negative_read_positions","text":"Sample_negative_read_positions","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/sample_negative_read_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample_negative_read_positions — sample_negative_read_positions","text":"","code":"sample_negative_read_positions(bam_df, n_samples)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/sample_negative_read_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample_negative_read_positions — sample_negative_read_positions","text":"bam_df bam dataframe load_BAM n_samples number samples","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/sample_negative_read_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample_negative_read_positions — sample_negative_read_positions","text":"negative_read_positions","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/sample_negative_read_positions_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Negative Read Positions with Indels information — sample_negative_read_positions_indels","title":"Sample Negative Read Positions with Indels information — sample_negative_read_positions_indels","text":"function takes data frame BAM file reads number samples, generates sample negative read positions. adds additional columns indel information, initializing default values.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/sample_negative_read_positions_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Negative Read Positions with Indels information — sample_negative_read_positions_indels","text":"","code":"sample_negative_read_positions_indels(bam_df, n_samples)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/sample_negative_read_positions_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Negative Read Positions with Indels information — sample_negative_read_positions_indels","text":"bam_df data frame representing BAM file reads. n_samples number negative read positions sample.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/sample_negative_read_positions_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Negative Read Positions with Indels information — sample_negative_read_positions_indels","text":"data frame similar bam_df additional columns: indel_length (initialized 0), indel_type (empty string), indel_seq (empty string).","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/strand_correct_umi_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Strand correct UMI features (ce and cd) — strand_correct_umi_features","title":"Strand correct UMI features (ce and cd) — strand_correct_umi_features","text":"function corrects orientation Unique Molecular Identifier (UMI) features based DNA strand originate. takes data frame containing UMI features adjusts reverse strand, ensuring orientation UMI sequences consistent representation forward strand. correction necessary accurate downstream analysis sequence data.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/strand_correct_umi_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strand correct UMI features (ce and cd) — strand_correct_umi_features","text":"","code":"strand_correct_umi_features(df)"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/strand_correct_umi_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strand correct UMI features (ce and cd) — strand_correct_umi_features","text":"df data.frame converted lists--lists (scanBam)","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/strand_correct_umi_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strand correct UMI features (ce and cd) — strand_correct_umi_features","text":"data.frame corrected UMI features","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/train_dreams_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train error model — train_dreams_model","title":"Train error model — train_dreams_model","text":"Train error model","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/train_dreams_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train error model — train_dreams_model","text":"","code":"train_dreams_model(   training_data,   layers,   model_features,   lr,   batch_size,   epochs,   model_file_path = NULL,   log_file_path = NULL,   min_delta = 0,   patience = 0,   l2_reg = 0,   validation_split = 0,   ctx3_embed_dim = 3 )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/train_dreams_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train error model — train_dreams_model","text":"training_data data.frame Input training data (Generated get_training_data()) layers Numeric vector. Number nodes layer. model_features Vector feature names. Selected features model training. lr Numeric value 0 1. Learning rate. batch_size Integer. Batch size. epochs Integer. Number training epochs. model_file_path String. Model output file path. Default NULL. log_file_path String. Path model output log file. Default NULL. min_delta Numeric value 0 1. Minimum delta early stopping. Default 0. patience Integer. Patience reaching minimum delta. Default 0. l2_reg Numeric value 0 1. Level L2 regularization per layer. Default 0. validation_split Numeric value 0 1. Validation split ratio. Default 0. ctx3_embed_dim Integer. Number dimensions embed trinucleotide context . Default 3.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/train_dreams_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train error model — train_dreams_model","text":"Trained model hdf5 format.","code":""},{"path":[]},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/train_dreams_model_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Train error model — train_dreams_model_indels","title":"Train error model — train_dreams_model_indels","text":"Train error model","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/train_dreams_model_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train error model — train_dreams_model_indels","text":"","code":"train_dreams_model_indels(   training_data,   layers,   model_features,   lr,   batch_size,   epochs,   model_file_path = NULL,   log_file_path = NULL,   min_delta = 0,   patience = 0,   l2_reg = 0,   validation_split = 0,   ctx3_embed_dim = 3 )"},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/train_dreams_model_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train error model — train_dreams_model_indels","text":"training_data data.frame Input training data (Generated get_training_data()) layers Numeric vector. Number nodes layer. model_features Vector feature names. Selected features model training. lr Numeric value 0 1. Learning rate. batch_size Integer. Batch size. epochs Integer. Number training epochs. model_file_path String. Model output file path. Default NULL. log_file_path String. Path model output log file. Default NULL. min_delta Numeric value 0 1. Minimum delta early stopping. Default 0. patience Integer. Patience reaching minimum delta. Default 0. l2_reg Numeric value 0 1. Level L2 regularization per layer. Default 0. validation_split Numeric value 0 1. Validation split ratio. Default 0. ctx3_embed_dim Integer. Number dimensions embed trinucleotide context . Default 3.","code":""},{"path":"https://https://jakobskoupedersenlab.github.io/dreams/reference/train_dreams_model_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train error model — train_dreams_model_indels","text":"Trained model hdf5 format.","code":""},{"path":[]}]
